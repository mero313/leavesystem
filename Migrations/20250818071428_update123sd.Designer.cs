// <auto-generated />
using System;
using LeaveRequestSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeaveRequestSystem.Migrations
{
    [DbContext(typeof(AppData))]
    [Migration("20250818071428_update123sd")]
    partial class update123sd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("ManagerId1");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByHRId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HRApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HRComments")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeaveType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ManagerApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerComments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByHRId");

                    b.HasIndex("ApprovedByManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActionByUserId");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequestHistory");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDaysPerRequest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDaysPerYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinDaysPerRequest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresHRApproval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresManagerApproval")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId", "LeaveType")
                        .IsUnique();

                    b.ToTable("LeaveSettings");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId1");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ApprovedByHR")
                        .WithMany()
                        .HasForeignKey("ApprovedByHRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ApprovedByManager")
                        .WithMany()
                        .HasForeignKey("ApprovedByManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "User")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByHR");

                    b.Navigation("ApprovedByManager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequestHistory", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ActionByUser")
                        .WithMany()
                        .HasForeignKey("ActionByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeaveRequestSystem.Domain.Entities.LeaveRequest", "LeaveRequest")
                        .WithMany("LeaveRequestHistory")
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", null)
                        .WithMany("ActionHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("ActionByUser");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveSettings", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.Department", "Department")
                        .WithMany("Settings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("Settings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.Navigation("LeaveRequestHistory");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("ActionHistory");

                    b.Navigation("LeaveRequests");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
