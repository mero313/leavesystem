// <auto-generated />
using System;
using LeaveRequestSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LeaveRequestSystem.Migrations
{
    [DbContext(typeof(AppData))]
    [Migration("20250825124055_createhruser2123213")]
    partial class createhruser2123213
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedByHRId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApprovedByManagerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("HRApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HRComments")
                        .HasColumnType("text");

                    b.Property<int>("LeaveType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ManagerApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerComments")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByHRId");

                    b.HasIndex("ApprovedByManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("FromStatus")
                        .HasColumnType("integer");

                    b.Property<int>("LeaveRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("ToStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionByUserId");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequestHistory");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("LeaveType")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDaysPerRequest")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDaysPerYear")
                        .HasColumnType("integer");

                    b.Property<int>("MinDaysPerRequest")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresHRApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresManagerApproval")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId", "LeaveType")
                        .IsUnique();

                    b.ToTable("LeaveSettings");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2025, 8, 25, 12, 40, 55, 236, DateTimeKind.Utc).AddTicks(5729),
                            Email = "hr@example.com",
                            IsActive = true,
                            Name = "Ahmed",
                            PasswordHash = "123",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 8, 25, 12, 40, 55, 236, DateTimeKind.Utc).AddTicks(5926),
                            Username = "hr"
                        });
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "Manager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("LeaveRequestSystem.Domain.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ApprovedByHR")
                        .WithMany()
                        .HasForeignKey("ApprovedByHRId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ApprovedByManager")
                        .WithMany()
                        .HasForeignKey("ApprovedByManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "User")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByHR");

                    b.Navigation("ApprovedByManager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequestHistory", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "ActionByUser")
                        .WithMany()
                        .HasForeignKey("ActionByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LeaveRequestSystem.Domain.Entities.LeaveRequest", "LeaveRequest")
                        .WithMany("LeaveRequestHistory")
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", null)
                        .WithMany("ActionHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("ActionByUser");

                    b.Navigation("LeaveRequest");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveSettings", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.Department", "Department")
                        .WithMany("Settings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("LeaveRequestSystem.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LeaveRequestSystem.Domain.Entities.User", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("Settings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.LeaveRequest", b =>
                {
                    b.Navigation("LeaveRequestHistory");
                });

            modelBuilder.Entity("LeaveRequestSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("ActionHistory");

                    b.Navigation("LeaveRequests");

                    b.Navigation("ManagedDepartment");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
